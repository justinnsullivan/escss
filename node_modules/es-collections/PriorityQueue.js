"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _Symbol = require("babel-runtime/core-js/symbol")["default"];

var _Array$from = require("babel-runtime/core-js/array/from")["default"];

var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

var _Symbol$iterator = require("babel-runtime/core-js/symbol/iterator")["default"];

var _regeneratorRuntime = require("babel-runtime/regenerator")["default"];

Object.defineProperty(exports, "__esModule", {
    value: true
});
function heapify(data, compareFunction) {
    for (var i = Math.floor((data.length - 2) / 2); i >= 0; i--) {
        sink(data, compareFunction, i);
    }
    return data;
}

function bubbleUp(data, compareFunction, index) {
    var value = data[index];

    while (index > 0) {
        var parentIndex = Math.floor((index - 1) / 2);
        var _parent = data[parentIndex];
        if (compareFunction(value, _parent) < 0) {
            data[index] = _parent;
        } else {
            break;
        }
        index = parentIndex;
    }
    data[index] = value;
    return index;
}

function sink(data, compareFunction, index) {
    var value = data[index];
    var size = data.length;

    while (2 * index + 1 < size) {
        var targetIndex = 2 * index + 1;
        if (targetIndex < size - 1 && compareFunction(data[targetIndex + 1], data[targetIndex]) < 0) {
            targetIndex++;
        }
        if (compareFunction(value, data[targetIndex]) <= 0) {
            break;
        }
        data[index] = data[targetIndex];
        index = targetIndex;
    }
    data[index] = value;
    return index;
}

var data = _Symbol("data");
var comp = _Symbol("compareFunction");

var PriorityQueue = (function () {
    function PriorityQueue(compareFunction, iterable) {
        _classCallCheck(this, PriorityQueue);

        if (typeof compareFunction !== "function") {
            throw new Error("PriorityQueue: no compareFunction defined");
        }
        this[comp] = compareFunction;

        if (iterable === undefined) {
            this[data] = [];
        } else {
            this[data] = heapify(_Array$from(iterable), compareFunction);
        }
    }

    _createClass(PriorityQueue, [{
        key: "add",
        value: function add(item) {
            this[data].push(item);
            bubbleUp(this[data], this[comp], this.size - 1);
            return this;
        }
    }, {
        key: "peek",
        value: function peek() {
            return this[data][0];
        }
    }, {
        key: "remove",
        value: function remove() {
            var output = this[data][0];
            if (this.size > 1) {
                this[data][0] = this[data].pop();
                sink(this[data], this[comp], 0);
            } else {
                this[data].pop();
            }
            return output;
        }
    }, {
        key: "delete",
        value: function _delete(item) {
            for (var i = 0; i < this.size - 1; i++) {
                if (this[comp](item, this[data][i]) === 0) {
                    this[data][i] = this[data].pop();
                    var newIndex = bubbleUp(this[data], this[comp], i);
                    sink(this[data], this[comp], newIndex);
                    return true;
                }
            }
            if (this[comp](this[data][this.size - 1], item) === 0) {
                this[data].pop();
                return true;
            }
            return false;
        }
    }, {
        key: "clear",
        value: function clear() {
            this[data] = [];
        }
    }, {
        key: "has",
        value: function has(item) {
            for (var i = 0; i < this.size; i++) {
                if (this[comp](item, this[data][i]) === 0) {
                    return true;
                }
            }
            return false;
        }
    }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _getIterator(this), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var item = _step.value;

                    callback.call(thisArg, item, this);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator["return"]) {
                        _iterator["return"]();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    }, {
        key: _Symbol$iterator,
        value: _regeneratorRuntime.mark(function value() {
            var i;
            return _regeneratorRuntime.wrap(function value$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        i = 0;

                    case 1:
                        if (!(i < this.size)) {
                            context$2$0.next = 7;
                            break;
                        }

                        context$2$0.next = 4;
                        return this[data][i];

                    case 4:
                        i++;
                        context$2$0.next = 1;
                        break;

                    case 7:
                    case "end":
                        return context$2$0.stop();
                }
            }, value, this);
        })
    }, {
        key: "size",
        get: function get() {
            return this[data].length;
        }
    }], [{
        key: "newNaturalMin",
        value: function newNaturalMin(iterator) {
            return new PriorityQueue(function (a, b) {
                if (a < b) {
                    return -1;
                }
                if (a > b) {
                    return 1;
                }
                return 0;
            }, iterator);
        }
    }, {
        key: "newNaturalMax",
        value: function newNaturalMax(iterator) {
            return new PriorityQueue(function (a, b) {
                if (a < b) {
                    return 1;
                }
                if (a > b) {
                    return -1;
                }
                return 0;
            }, iterator);
        }
    }]);

    return PriorityQueue;
})();

exports["default"] = PriorityQueue;
module.exports = exports["default"];