"use strict";

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _Symbol = require("babel-runtime/core-js/symbol")["default"];

var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

var _Symbol$iterator = require("babel-runtime/core-js/symbol/iterator")["default"];

var _regeneratorRuntime = require("babel-runtime/regenerator")["default"];

Object.defineProperty(exports, "__esModule", {
    value: true
});
var data = _Symbol("data");

var _default = (function () {
    var _class = function _default(iterable) {
        _classCallCheck(this, _class);

        this[data] = [];
        if (iterable) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _getIterator(iterable), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var item = _step.value;

                    this.push(item);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator["return"]) {
                        _iterator["return"]();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    };

    _createClass(_class, [{
        key: "push",
        value: function push(item) {
            this[data].push(item);
            return this;
        }
    }, {
        key: "pop",
        value: function pop() {
            return this[data].pop();
        }
    }, {
        key: "peek",
        value: function peek() {
            return this[data][this[data].length - 1];
        }
    }, {
        key: "clear",
        value: function clear() {
            this[data] = [];
        }
    }, {
        key: "has",
        value: function has(item) {
            for (var i = 0; i < this.size; i++) {
                if (item === this[data][i]) {
                    return true;
                }
            }
            return false;
        }
    }, {
        key: "forEach",
        value: function forEach(callback, thisArg) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = _getIterator(this), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var item = _step2.value;

                    callback.call(thisArg, item, this);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                        _iterator2["return"]();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    }, {
        key: _Symbol$iterator,
        value: _regeneratorRuntime.mark(function value() {
            var i;
            return _regeneratorRuntime.wrap(function value$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        i = this[data].length - 1;

                    case 1:
                        if (!(i >= 0)) {
                            context$2$0.next = 7;
                            break;
                        }

                        context$2$0.next = 4;
                        return this[data][i];

                    case 4:
                        i--;
                        context$2$0.next = 1;
                        break;

                    case 7:
                    case "end":
                        return context$2$0.stop();
                }
            }, value, this);
        })
    }, {
        key: "size",
        get: function get() {
            return this[data].length;
        }
    }]);

    return _class;
})();

exports["default"] = _default;
module.exports = exports["default"];